[1mdiff --git a/backend/src/controllers/auth.controller.js b/backend/src/controllers/auth.controller.js[m
[1mindex a6d3ccb..c591268 100644[m
[1m--- a/backend/src/controllers/auth.controller.js[m
[1m+++ b/backend/src/controllers/auth.controller.js[m
[36m@@ -1,18 +1,105 @@[m
 import User from "../models/user.model.js";[m
 import { generateToken } from "../lib/token.js";[m
[31m-import passport from "passport";[m
[31m-import GoogleStrategy from "passport-google-oidc";[m
[32m+[m[32mimport { sendEmail } from "../lib/email.js";[m
[32m+[m[32mimport bcrypt from "bcryptjs";[m
 import dotenv from "dotenv";[m
 dotenv.config();[m
 [m
[32m+[m[32mconst otpStore = {};[m
 [m
[31m-// export const signup = async (req, res) => {[m
[32m+[m[32mexport const signup = async (req, res) => {[m
[32m+[m[32m    const { username, email, password } = req.body;[m
[32m+[m[32m    try {[m
[32m+[m[32m        const existing = await User.findOne({ email });[m
[32m+[m[32m        if (existing) {[m
[32m+[m[32m            return res.status(400).json({[m
[32m+[m[32m                message: "Email already in use"[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m        // generate the random OTP[m
[32m+[m[32m        const otp = Math.floor(100000 + Math.random() * 900000).toString();[m
[32m+[m
[32m+[m[32m        const timeoutId = setTimeout(()=>{[m
[32m+[m[32m            delete otpStore[email];[m
[32m+[m[32m        }, 5 * 60 * 1000);[m
[32m+[m[32m        console.log(otp);[m
[32m+[m[32m        otpStore[email] = {otp, timeoutId};[m
[32m+[m
[32m+[m[32m        await sendEmail([m
[32m+[m[32m            email,[m
[32m+[m[32m            "OTP Verification for CFTracker",[m
[32m+[m[32m            `Your OTP is: ${otp}`[m
[32m+[m[32m        );[m
[32m+[m
[32m+[m[32m        res.status(201).json({[m
[32m+[m[32m            message: "OTP sent to email"[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m    catch (err) {[m
[32m+[m[32m        res.status(500).json({[m
[32m+[m[32m            message: "Signup failed",[m
[32m+[m[32m            error: err.message[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
 [m
[31m-// }[m
[32m+[m[32mexport const login = async (req, res) => {[m
[32m+[m[32m    const { email, password } = req.body;[m
[32m+[m[32m    try {[m
[32m+[m[32m        const user = await User.findOne({ email });[m
 [m
[31m-// export const login = async (req, res) => {[m
[32m+[m[32m        if (!user || !user.isVerified)[m
[32m+[m[32m            return res.status(400).json({ message: "Invalid credentials or unverified account" });[m
 [m
[31m-// }[m
[32m+[m[32m        const isMatch = await bcrypt.compare(password, user.password);[m
[32m+[m[32m        if (!isMatch) return res.status(400).json({ message: "Incorrect password" });[m
[32m+[m
[32m+[m[32m        generateToken(user._id, res);[m
[32m+[m
[32m+[m[32m        res.status(200).json({ message: "Login successful", user });[m
[32m+[m[32m    } catch (err) {[m
[32m+[m[32m        res.status(500).json({ message: "Login failed", error: err.message });[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport const verify = async (req, res) =>{[m
[32m+[m[32m    const {username, email, password, otp } = req.body;[m
[32m+[m[32m    const stored = otpStore[email];[m
[32m+[m[32m    if (!stored) {[m
[32m+[m[32m        return res.status(400).json({[m
[32m+[m[32m            message: "No OTP found. Please sign up again."[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m    // Check match[m
[32m+[m[32m    if (stored.otp !== otp) {[m
[32m+[m[32m        return res.status(400).json({[m
[32m+[m[32m            message: "Invalid OTP"[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m    try {[m
[32m+[m[32m        const hashedPassword = await bcrypt.hash(password, 10);[m
[32m+[m[32m        const user = new User({[m
[32m+[m[32m            username,[m
[32m+[m[32m            email,[m
[32m+[m[32m            password: hashedPassword,[m
[32m+[m[32m            provider: "manual",[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        await user.save();[m[41m [m
[32m+[m[32m        clearTimeout(stored.timeoutId)[m
[32m+[m[32m        delete otpStore[email]; // Clean up after successful verification[m
[32m+[m[32m        generateToken(user._id, res);[m
[32m+[m[32m        res.status(200).json({[m
[32m+[m[32m            username: user.username,[m
[32m+[m[32m            email: user.email[m
[32m+[m[32m        });[m
[32m+[m[32m    } catch (err) {[m
[32m+[m[32m        res.status(500).json({[m
[32m+[m[32m            message: "Verification failed",[m
[32m+[m[32m            error: err.message[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
 [m
 export const getInfo = async (req, res) => {[m
     console.log(req.user);[m
[36m@@ -31,7 +118,7 @@[m [mexport const getInfo = async (req, res) => {[m
     }[m
 }[m
 [m
[31m-export const logout = () => {[m
[32m+[m[32mexport const logout = (req, res) => {[m
     try {[m
         res.cookie("jwt", "", { maxAge: 0 });[m
         res.status(200).json({ message: "Logged out successfully" });[m
[1mdiff --git a/backend/src/index.js b/backend/src/index.js[m
[1mindex 9ecdacc..c629abe 100644[m
[1m--- a/backend/src/index.js[m
[1m+++ b/backend/src/index.js[m
[36m@@ -8,7 +8,6 @@[m [mimport cookieParser from "cookie-parser";[m
 import cors from "cors";[m
 import './lib/google.js';[m
 import passport from 'passport';[m
[31m-import manualAuthRoutes from "./routes/manualAuth.routes.js";[m
 [m
 const app = express();[m
 [m
[36m@@ -32,7 +31,6 @@[m [mapp.use(cookieParser());[m
 app.use("/api/auth", authRoutes);[m
 app.use("/api/problems", problemRoutes);[m
 app.use("/api/link", linkRoute)[m
[31m-app.use("/api/manual-auth", manualAuthRoutes);[m
 [m
 const PORT = process.env.PORT;[m
 [m
[1mdiff --git a/backend/src/lib/email.js b/backend/src/lib/email.js[m
[1mindex bf88d24..4164834 100644[m
[1m--- a/backend/src/lib/email.js[m
[1m+++ b/backend/src/lib/email.js[m
[36m@@ -1,5 +1,6 @@[m
[31m-// backend/lib/email.js[m
 import nodemailer from "nodemailer";[m
[32m+[m[32mimport dotenv from "dotenv";[m
[32m+[m[32mdotenv.config();[m
 [m
 const transporter = nodemailer.createTransport({[m
   service: "gmail",[m
[36m@@ -18,4 +19,4 @@[m [mexport const sendEmail = async (to, subject, text) => {[m
   };[m
 [m
   await transporter.sendMail(mailOptions);[m
[31m-};[m
[32m+[m[32m};[m
\ No newline at end of file[m
[1mdiff --git a/backend/src/middleware/isAuth.js b/backend/src/middleware/isAuth.js[m
[1mindex 360ee2c..52d07e2 100644[m
[1m--- a/backend/src/middleware/isAuth.js[m
[1m+++ b/backend/src/middleware/isAuth.js[m
[36m@@ -2,7 +2,6 @@[m [mimport jwt from "jsonwebtoken";[m
 import User from "../models/user.model.js";[m
 [m
 export const protectRoute = async (req, res, next) => {[m
[31m-  console.log("No token");[m
   try {[m
     const token = req.cookies.jwt;[m
 [m
[1mdiff --git a/backend/src/routes/auth.routes.js b/backend/src/routes/auth.routes.js[m
[1mindex 9b79436..574a0dd 100644[m
[1m--- a/backend/src/routes/auth.routes.js[m
[1m+++ b/backend/src/routes/auth.routes.js[m
[36m@@ -3,7 +3,7 @@[m [mimport express from "express";[m
 import passport from "passport";[m
 import { generateToken } from "../lib/token.js";[m
 const router = express.Router();[m
[31m-import {getInfo} from "../controllers/auth.controller.js"[m
[32m+[m[32mimport {getInfo, login, logout, signup, verify} from "../controllers/auth.controller.js"[m
 import { protectRoute } from "../middleware/isAuth.js";[m
 [m
 // sends request to the google authentication server[m
[36m@@ -20,5 +20,16 @@[m [mrouter.get('/google/callback',[m
     }[m
 );[m
 [m
[32m+[m[32m// Signup request from user(manually)[m
[32m+[m[32mrouter.post("/signup", signup);[m
[32m+[m
[32m+[m[32m//  Verify OTP[m
[32m+[m[32mrouter.post("/verify", verify);[m
[32m+[m
[32m+[m[32m//  Login[m
[32m+[m[32mrouter.post("/login", login);[m
[32m+[m
 router.get('/me',protectRoute, getInfo);[m
[32m+[m
[32m+[m[32mrouter.post('/logout', logout)[m
 export default router;[m
[1mdiff --git a/backend/src/routes/manualAuth.routes.js b/backend/src/routes/manualAuth.routes.js[m
[1mdeleted file mode 100644[m
[1mindex 26e6823..0000000[m
[1m--- a/backend/src/routes/manualAuth.routes.js[m
[1m+++ /dev/null[m
[36m@@ -1,87 +0,0 @@[m
[31m-// backend/routes/manualAuth.routes.js[m
[31m-[m
[31m-import express from "express";[m
[31m-import bcrypt from "bcryptjs";[m
[31m-import jwt from "jsonwebtoken";[m
[31m-import User from "../models/user.model.js";[m
[31m-import { sendEmail } from "../lib/email.js";[m
[31m-import { generateToken } from "../lib/token.js";[m
[31m-[m
[31m-const router = express.Router();[m
[31m-[m
[31m-// Signup request from user(manually)[m
[31m-router.post("/signup", async (req, res) => {[m
[31m-    const { username, email, password } = req.body;[m
[31m-    try {[m
[31m-        const existing = await User.findOne({ email });[m
[31m-        if (existing && !existing.isVerified) {[m
[31m-            await User.deleteOne({ email }); // clear previous unverified email[m
[31m-        } [m
[31m-        else if (existing && existing.isVerified) {[m
[31m-            return res.status(400).json({ message: "Email already in use" });[m
[31m-        }[m
[31m-[m
[31m-        const hashedPassword = await bcrypt.hash(password, 10);[m
[31m-        const otp = Math.floor(100000 + Math.random() * 900000).toString();[m
[31m-[m
[31m-        const user = new User({[m
[31m-            username,[m
[31m-            email,[m
[31m-            password: hashedPassword,[m
[31m-            provider: "manual",[m
[31m-            otp,[m
[31m-            isVerified: false,[m
[31m-        });[m
[31m-[m
[31m-        await user.save();[m
[31m-[m
[31m-        await sendEmail(email, " OTP Verification for CFTracker", `Your OTP is: ${otp}`);[m
[31m-[m
[31m-        res.status(201).json({ message: "OTP sent to email" });[m
[31m-    } [m
[31m-    catch (err) {[m
[31m-        res.status(500).json({ message: "Signup failed", error: err.message });[m
[31m-    }[m
[31m-});[m
[31m-[m
[31m-//  Verify OTP[m
[31m-router.post("/verify", async (req, res) => {[m
[31m-    const { email, otp } = req.body;[m
[31m-    try {[m
[31m-        const user = await User.findOne({ email });[m
[31m-        if (!user) return res.status(404).json({ message: "User not found" });[m
[31m-[m
[31m-        if (user.otp !== otp) return res.status(400).json({ message: "Invalid OTP" });[m
[31m-[m
[31m-        user.isVerified = true;[m
[31m-        user.otp = null;[m
[31m-        await user.save();[m
[31m-[m
[31m-        res.status(200).json({ message: "Email verified. You can now login." });[m
[31m-    } [m
[31m-    catch (err) {[m
[31m-        res.status(500).json({ message: "Verification failed", error: err.message });[m
[31m-    }[m
[31m-});[m
[31m-[m
[31m-//  Login[m
[31m-router.post("/login", async (req, res) => {[m
[31m-    const { email, password } = req.body;[m
[31m-    try {[m
[31m-        const user = await User.findOne({email});[m
[31m-[m
[31m-        if (!user || !user.isVerified)[m
[31m-            return res.status(400).json({ message: "Invalid credentials or unverified account" });[m
[31m-[m
[31m-        const isMatch = await bcrypt.compare(password, user.password);[m
[31m-        if (!isMatch) return res.status(400).json({ message: "Incorrect password" });[m
[31m-[m
[31m-        generateToken(user._id, res);[m
[31m-[m
[31m-        res.status(200).json({ message: "Login successful", user });[m
[31m-    } catch (err) {[m
[31m-        res.status(500).json({ message: "Login failed", error: err.message });[m
[31m-    }[m
[31m-});[m
[31m-[m
[31m-export default router;[m
[1mdiff --git a/frontend/src/App.jsx b/frontend/src/App.jsx[m
[1mindex d8fc551..b21555f 100644[m
[1m--- a/frontend/src/App.jsx[m
[1m+++ b/frontend/src/App.jsx[m
[36m@@ -4,6 +4,9 @@[m [mimport LoginPage from './Pages/Loginpage/Loginpage.jsx'[m
 import { Route ,Routes,useLocation } from "react-router-dom"[m
 import { useAuthStore } from './store/useAuthStore.js'[m
 import { useEffect } from 'react';[m
[32m+[m[32mimport SignUppage from "./Pages/Loginpage/SignUppage.jsx"[m
[32m+[m[32mimport {VerifyOtp} from "./components/otp.jsx";[m
[32m+[m
 export default function App() {[m
   const {authUser, getUser} = useAuthStore();[m
 [m
[36m@@ -16,6 +19,8 @@[m [mexport default function App() {[m
       <Routes>[m
         <Route path="/" element={authUser !== null ? <Homepage/> : <LoginPage />}/>[m
         <Route path="/login" element={<LoginPage/>}/>[m
[32m+[m[32m        <Route path="/signup" element={<SignUppage/>}/>[m
[32m+[m[32m        <Route path="/verify-otp" element={<VerifyOtp />} />[m
       </Routes>[m
     </>[m
   )[m
[1mdiff --git a/frontend/src/components/login-form.jsx b/frontend/src/components/login-form.jsx[m
[1mindex d1b0a7e..cf4ef5d 100644[m
[1m--- a/frontend/src/components/login-form.jsx[m
[1m+++ b/frontend/src/components/login-form.jsx[m
[36m@@ -3,18 +3,19 @@[m [mimport { Button } from "@/components/ui/button"[m
 import { Input } from "@/components/ui/input"[m
 import { Label } from "@/components/ui/label"[m
 import { useAuthStore } from "../store/useAuthStore"[m
[32m+[m[32mimport { Link } from "react-router-dom"[m
 [m
 export function LoginForm({[m
   className,[m
   ...props[m
 }) {[m
[31m-  const {loginG} = useAuthStore();[m
[32m+[m[32m  const {loginGoogle} = useAuthStore();[m
   return ([m
     <form className={cn("flex flex-col gap-6", className)} {...props}>[m
       <div className="flex flex-col items-center gap-2 text-center">[m
         <h1 className="text-2xl font-bold">Login to your account</h1>[m
         <p className="text-muted-foreground text-sm text-balance">[m
[31m-          Enter your email below to login to your account[m
[32m+[m[32m          Enter your email and password[m
         </p>[m
       </div>[m
       <div className="grid gap-6">[m
[36m@@ -37,10 +38,10 @@[m [mexport function LoginForm({[m
         <div[m
           className="after:border-border relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t">[m
           <span className="bg-background text-muted-foreground relative z-10 px-2">[m
[31m-            Or continue with[m
[32m+[m[32m            Or[m
           </span>[m
         </div>[m
[31m-        <Button variant="outline" className="w-full" onClick={loginG}>[m
[32m+[m[32m        <Button variant="outline" className="w-full" onClick={loginGoogle}>[m
           <img[m
             src="https://fonts.gstatic.com/s/i/productlogos/googleg/v6/24px.svg"[m
             alt="Google logo"[m
[36m@@ -51,9 +52,9 @@[m [mexport function LoginForm({[m
       </div>[m
       <div className="text-center text-sm">[m
         Don&apos;t have an account?{" "}[m
[31m-        <a href="#" className="underline underline-offset-4">[m
[32m+[m[32m        <Link to="/signup" className="link link-primary">[m
           Sign up[m
[31m-        </a>[m
[32m+[m[32m        </Link>[m
       </div>[m
     </form>[m
   );[m
[1mdiff --git a/frontend/src/components/nav-user.jsx b/frontend/src/components/nav-user.jsx[m
[1mindex 866e12a..b7e4e39 100644[m
[1m--- a/frontend/src/components/nav-user.jsx[m
[1m+++ b/frontend/src/components/nav-user.jsx[m
[36m@@ -29,12 +29,16 @@[m [mimport {[m
   SidebarMenuItem,[m
   useSidebar,[m
 } from "@/components/ui/sidebar"[m
[32m+[m[32mimport { useAuthStore } from "../store/useAuthStore"[m
 [m
 export function NavUser({[m
   user[m
 }) {[m
   const { isMobile } = useSidebar()[m
[31m-[m
[32m+[m[32m  const {logout} = useAuthStore();[m
[32m+[